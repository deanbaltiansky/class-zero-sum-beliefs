[{"name":"app.R","content":"# study-1/app/app.R\nlibrary(shiny)\n\n# ---- Data sources (shinylive = local files only) ----\nnumeric_vars_user <- c(\n  # << put your numeric/continuous choices here for Class Zero-Sum >>\n  # You can start by pasting the BSC list, then prune/expand for this dataset.\n  # Example placeholders:\n  \"zs_class\",\"SDO\",\"zsm\",\"lnktfate\",\"soli\",\"support\"\n  \"ideo_con\",\"ideo_lib\",\"ideo_demsoc\",\"ideo_lbrtn\",\"ideo_prog\",\n  \"man\",\"white\",\"age\",\"income_num\",\"edu_num\"\n)\n\nload_data <- function() {\n  p <- \"data/df_czs_elg.csv\"  # <— rename if you prefer; must be bundled with the app\n  if (!file.exists(p)) stop(\"Missing data/df_czs_elg.csv in app/data/\")\n  read.csv(p, check.names = FALSE, stringsAsFactors = FALSE)\n}\n\nload_var_info <- function() {\n  p <- \"data/var_info.csv\"\n  if (!file.exists(p)) {\n    return(data.frame(var = character(), label = character(), description = character(),\n                      stringsAsFactors = FALSE))\n  }\n  vi <- read.csv(p, check.names = FALSE, stringsAsFactors = FALSE)\n  names(vi) <- tolower(names(vi))\n  if (!\"var\" %in% names(vi)) vi$var <- character(0)\n  if (!\"label\" %in% names(vi)) vi$label <- vi$var\n  if (!\"description\" %in% names(vi)) vi$description <- \"\"\n  vi$var <- trimws(vi$var)\n  vi$label <- ifelse(nzchar(trimws(vi$label)), trimws(vi$label), vi$var)\n  vi$description <- trimws(vi$description)\n  unique(vi[c(\"var\",\"label\",\"description\")])\n}\n\nui <- tagList(\n  tags$head(\n    tags<title>(\"Correlations App\"),\n    tags$script(HTML('window.addEventListener(\"load\", function(){ document.title = \"Correlations App\"; });'))\n  ),\n  fluidPage(\n    title = \"Correlations App\",\n    titlePanel(\"Class Zero-Sum Beliefs — Correlations\"),\n    sidebarLayout(\n      sidebarPanel(\n        helpText(\"Pick two continuous variables to explore their linear relationship.\"),\n        selectInput(\"xvar\", \"X axis\", choices = NULL),\n        selectInput(\"yvar\", \"Y axis\", choices = NULL)\n      ),\n      mainPanel(\n        plotOutput(\"scatter\", height = 420),\n        tags$hr(),\n        verbatimTextOutput(\"stats\"),\n        tags$hr(),\n        tags$h4(\"Variable descriptions\"),\n        uiOutput(\"xdesc\"),\n        uiOutput(\"ydesc\")\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  df <- load_data()\n  var_info <- load_var_info()\n  \n  get_label <- function(v) {\n    if (is.null(v) || !nzchar(v)) return(\"\")\n    hit <- var_info$label[var_info$var == v]\n    if (length(hit) == 1 && nzchar(hit)) hit else v\n  }\n  get_desc <- function(v) {\n    if (is.null(v) || !nzchar(v)) return(\"\")\n    hit <- var_info$description[var_info$var == v]\n    if (length(hit) == 1 && nzchar(hit)) hit else \"No description found.\"\n  }\n  \n  available <- intersect(numeric_vars_user, names(df))\n  if (length(available) < 2) {\n    stop(\"Fewer than 2 valid numeric columns found. Check df_czs_elg.csv column names.\")\n  }\n  \n  choice_labels <- vapply(available, get_label, character(1))\n  choices <- setNames(object = available, nm = choice_labels)\n  \n  updateSelectInput(session, \"xvar\", choices = choices, selected = available[1])\n  updateSelectInput(session, \"yvar\", choices = choices, selected = available[2])\n  \n  pair_data <- reactive({\n    req(input$xvar, input$yvar)\n    vars <- c(input$xvar, input$yvar)\n    vars <- intersect(vars, names(df))\n    validate(need(length(vars) == 2, \"Pick two valid variables.\"))\n    \n    d <- df[, vars, drop = FALSE]\n    d[] <- lapply(d, function(x) if (is.character(x)) suppressWarnings(as.numeric(x)) else x)\n    d <- stats::na.omit(d)\n    validate(\n      need(nrow(d) >= 3, \"Not enough non-missing pairs to plot.\"),\n      need(stats::sd(d[[1]]) > 0, \"X has no variance.\"),\n      need(stats::sd(d[[2]]) > 0, \"Y has no variance.\")\n    )\n    d\n  })\n  \n  output$scatter <- renderPlot({\n    d <- pair_data()\n    plot(\n      d[[1]], d[[2]], pch = 19,\n      xlab = get_label(input$xvar),\n      ylab = get_label(input$yvar)\n    )\n    fit <- lm(d[[2]] ~ d[[1]])\n    abline(fit, lwd = 2)\n  })\n  \n  output$stats <- renderText({\n    d <- pair_data()\n    ct <- cor.test(d[[1]], d[[2]], method = \"pearson\")\n    sprintf(\"Pearson r = %.3f   (p = %.3g,  n = %d)\",\n            unname(ct$estimate), ct$p.value, nrow(d))\n  })\n  \n  output$xdesc <- renderUI({\n    req(input$xvar)\n    tags$p(tags$strong(\"X: \"), tags$em(get_desc(input$xvar)))\n  })\n  output$ydesc <- renderUI({\n    req(input$yvar)\n    tags$p(tags$strong(\"Y: \"), tags$em(get_desc(input$yvar)))\n  })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
